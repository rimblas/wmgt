
-- Generated by ORDS REST Data Services 23.2.0.r1770931
-- Schema: WMGT  Date: Thu May 30 01:23:52 2024 
--

BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'WMGT',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'wmgt',
      p_auto_rest_auth      => FALSE);
    
  ORDS.DEFINE_MODULE(
      p_module_name    => 'Tournament Rounds',
      p_base_path      => '/tournament/',
      p_items_per_page => 25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'Tournament Rounds',
      p_pattern        => 'rounds',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'Tournament Rounds',
      p_pattern        => 'rounds',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'declare
l_clob clob;
l_scope logger_logs.scope%type := ''REST:tournament/rounds'';

begin
logger.log(p_text => ''START'', p_scope => l_scope);
logger.log(p_text => ''week:'' || :week, p_scope => l_scope);
select json_object(
       ''season''  value to_number(substr(s.week,2,2))
     , ''round''   value s.round_num
     , ''easyCourse'' value s.easy_course_code
     , ''hardCourse'' value s.hard_course_code
     , ''scores'' value (
            select json_arrayagg(
                   json_object(
                    ''player''          value r.account
                  , ''id''              value r.player_id
                  , ''easyRoundTotal''  value r.easy_roundTotal
                  , ''easyRoundScore''  value r.easy_roundScore
                  , ''easyScorecard''   value (
                      select json_arrayagg(u.par order by u.h)
                       from wmg_rounds_unpivot_mv u
                      where u.player_id = r.player_id
                        and u.course_id =' || ' s.easy_course_id
                        and u.week = r.week
                     )
                  , ''hardScorecard''   value (
                      select json_arrayagg(u.par order by u.h)
                       from wmg_rounds_unpivot_mv u
                      where u.player_id = r.player_id
                        and u.course_id = s.hard_course_id
                        and u.week = r.week
                     ) RETURNING CLOB 
               ) RETURNING CLOB
             ) 
             from (
             select week
                  , account
                  , player_id
                  , easy_roundScore
                  , hard_roundScore
                  , easy_roundTotal
                  , hard_roundTotal
             from (

             select r.week
                  , r.account
                  , r.player_id
                  , r.round_strokes
                  , r.under_par
                  , tc.course_no
               from wmg_' || 'rounds_v r
                  , wmg_tournament_courses tc
              where r.tournament_session_id = tc.tournament_session_id
                and r.course_id = tc.course_id
                and r.week = :week -- s.week
                -- and r.account in (''INDY'', ''his.Dudeness'') -- , ''Blutes87'', ''Browner'', ''B8Y'')
              )
              pivot (
                  sum(under_par) roundScore, sum(round_strokes) roundTotal for course_no in (
                    1 EASY, 2 HARD
                   )
                )
             
             ) r
       ) RETURNING CLOB
    ) d
  into l_clob
  from wmg_tournament_sessions_v s
 where s.week = :week;

apex_util.prn (
        p_clob   => l_clob
      , p_escape => false );

end;
');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Tournament Rounds',
      p_pattern            => 'rounds',
      p_method             => 'GET',
      p_name               => 'week',
      p_bind_variable_name => 'week',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'Tournament Rounds',
      p_pattern        => 'season',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'Tournament Rounds',
      p_pattern        => 'season',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'declare
l_clob clob;
begin
select json_arrayagg(
      json_object(
       ''season''  value to_number(substr(s.week,2,2))
     , ''round''   value s.round_num
     , ''easyCourse'' value s.easy_course_code
     , ''hardCourse'' value s.hard_course_code
     , ''scores'' value (
            select json_arrayagg(
                   json_object(
                    ''player''          value r.account
                  , ''id''              value r.player_id
                  , ''easyRoundTotal''  value r.easy_roundTotal
                  , ''easyRoundScore''  value r.easy_roundScore
                  , ''easyScorecard''   value (
                      select json_arrayagg(u.par order by u.h)
                       from wmg_rounds_unpivot_mv u
                      where u.player_id = r.player_id
                        and u.course_id = s.easy_course_id
                        and u.week = r.week
                     )
                  , ''hardScorecard''   value (
                   ' || '   select json_arrayagg(u.par order by u.h)
                       from wmg_rounds_unpivot_mv u
                      where u.player_id = r.player_id
                        and u.course_id = s.hard_course_id
                        and u.week = r.week
                     ) RETURNING CLOB 
               ) RETURNING CLOB
             ) 
             from (
             select week
                  , account
                  , player_id
                  , easy_roundScore
                  , hard_roundScore
                  , easy_roundTotal
                  , hard_roundTotal
             from (

             select r.week
                  , r.account
                  , r.player_id
                  , r.round_strokes
                  , r.under_par
                  , tc.course_no
               from wmg_rounds_v r
                   , wmg_tournament_courses tc
              where r.tournament_session_id = tc.tournament_session_id
                and r.' || 'course_id = tc.course_id
                and r.week like substr(:season,1,3) || ''%''
                -- and r.account in (''INDY'', ''his.Dudeness'') -- , ''Blutes87'', ''Browner'', ''B8Y'')
              )
              pivot (
                  sum(under_par) roundScore, sum(round_strokes) roundTotal for course_no in (
                    1 EASY, 2 HARD
                   )
                )

             ) r
       ) RETURNING CLOB
  ) RETURNING CLOB
    ) d
  into l_clob
  from wmg_tournament_sessions_v s
 where s.week like substr(:season,1,3) || ''%'';

apex_util.prn (
        p_clob   => l_clob
      , p_escape => false );
end;
');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Tournament Rounds',
      p_pattern            => 'season',
      p_method             => 'GET',
      p_name               => 'season',
      p_bind_variable_name => 'season',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'S01,S02, etc...');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'Tournament Rounds',
      p_pattern        => 'signups',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'Tournament Rounds',
      p_pattern        => 'signups',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 0,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'with curr as (
select s.week, s.id tournament_session_id
     , s.rooms_open_flag
from wmg_tournament_sessions s
where s.tournament_id in (
    select id
      from wmg_tournaments
     where current_flag = ''Y''
)
and s.session_date+1 >= trunc(current_timestamp)
and s.completed_ind = ''N''
order by s.session_date desc
fetch first 1 rows only
)
, last_player as (
    select player_name
    from (
      select tp.player_name, row_number() over (order by tp.tournament_player_created desc) rn
      from wmg_tournament_player_v tp
        , curr
    where tp.tournament_session_id = curr.tournament_session_id
      and tp.active_ind = ''Y''
    )
    where rn = 1
)
select ''application/json'' content_type
    ,  json_object(
     ''week'' value s.week
   , ''rooms_open'' value s.rooms_open_flag
   , ''players'' value s.players
   , ''newPlayers'' value s.new_players
   , ''latestPlayer'' value last_player.player_name
      , ''results'' value (
       select  json_arrayagg(
  ' || '        json_object(''player'' value p.player_result)
        ) 
        from (
          select p.*
            from (
            select p.pos, p.total_score || '' '' || pp.player_name player_result
                , row_number() over (order by p.total_score, pp.player_name) rn
            from wmg_tournament_session_points_v p
               , curr
               , wmg_players_v pp
            where p.tournament_session_id = curr.tournament_session_id
              and p.player_id = pp.id
            ) p
            where p.pos <= 3
            order by p.rn
          ) p
      )  -- results content
 ) content
from (
    select curr.week
          , curr.rooms_open_flag
          , count(*) players
          , sum(decode(tp.rank_code, ''NEW'', 1, 0)) new_players
    from wmg_tournament_player_v tp
        , curr
    where tp.tournament_session_id = curr.tournament_session_id
      and tp.active_ind = ''Y''
    group by curr.week, curr.rooms_open_flag
) s
, last_' || 'player
');

    
        
COMMIT;

END;